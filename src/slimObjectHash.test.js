// const slimObjectHash = require('../dist/slimObjectHash')
const slimObjectHash = require('./slimObjectHash')

describe('slimObjectHash', () => {
  it('objects with different order create same hash', () => {
    const hash1 = slimObjectHash({ a: '1', b: '2', c: '3' })
    const hash2 = slimObjectHash({ c: '3', b: '2',  a: '1'})
    expect(hash1).toEqual(hash2)
  })
  it('number integer comparison', () => {
    const hash1 = slimObjectHash({ a: 1 })
    const hash2 = slimObjectHash({ a: '1' })
    expect(hash1).not.toEqual(hash2)
  })
  it('objects with arrays', () => {
    const hash1 = slimObjectHash({ a: [1, 2] })
    const hash2 = slimObjectHash({ a: [1, 2] })
    expect(hash1).toEqual(hash2)
  })
  it('objects with arrays that have different orders', () => {
    const hash1 = slimObjectHash({ a: [1, 2] })
    const hash2 = slimObjectHash({ a: [2, 1] })
    expect(hash1).not.toEqual(hash2)
  })
  it('objects with boolean', () => {
    const hash1 = slimObjectHash({ a: false })
    const hash2 = slimObjectHash({ a: false })
    const hash3 = slimObjectHash({ a: 'false' })
    expect(hash1).toEqual(hash2)
    expect(hash1).not.toEqual(hash3)
    expect(hash2).not.toEqual(hash3)
  })
  it('objects with regex', () => {
    const hash1 = slimObjectHash({ a: /asdf/ })
    const hash2 = slimObjectHash({ a: /asdf/ })
    const hash3 = slimObjectHash({ a: /fdsa/ })
    expect(hash1).toEqual(hash2)
    expect(hash1).not.toEqual(hash3)
    expect(hash2).not.toEqual(hash3)
  })
  it('objects with tricky nulls', () => {
    const hash1 = slimObjectHash({ a: null })
    const hash2 = slimObjectHash({ a: null })
    const hash3 = slimObjectHash({ a: 'null' })
    expect(hash1).toEqual(hash2)
    expect(hash1).not.toEqual(hash3)
    expect(hash2).not.toEqual(hash3)
  })
  it('objects with tricky undefined', () => {
    const hash1 = slimObjectHash({ a: undefined })
    const hash2 = slimObjectHash({ a: undefined })
    const hash3 = slimObjectHash({ a: 'undefined' })
    expect(hash1).toEqual(hash2)
    expect(hash1).not.toEqual(hash3)
    expect(hash2).not.toEqual(hash3)
  })
  it('nested arrays', () => {
    const hash1 = slimObjectHash({ a: ['a', 1, { a: 'b'}] })
    const hash2 = slimObjectHash({ a: ['a', 1, { a: 'b'}] })
    const hash3 = slimObjectHash({ a: ['a', 1, { a: 'c'}] })
    expect(hash1).toEqual(hash2)
    expect(hash1).not.toEqual(hash3)
    expect(hash2).not.toEqual(hash3)
  })
  it.skip('tricky object keys (not account for this)', () => {
    const hash1 = slimObjectHash({ 1: 1 })
    const hash2 = slimObjectHash({ '1': 1 })
    expect(hash1).not.toEqual(hash2)
  })
})